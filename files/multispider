#!/usr/bin/python3
# vim: expandtab tabstop=4 syntax=python

import logging
import json
import os
import shutil
import sys
from threading import Thread

from pyroute2 import IPDB # pylint: disable=no-name-in-module

import zmq


def metadata_receiver():
    context = zmq.Context()
    socket = context.socket(zmq.SUB) # pylint: disable=no-member

    socket.connect("tcp://172.17.0.1:5556")
    topicfilter = ''
    socket.setsockopt_string(zmq.SUBSCRIBE, topicfilter) # pylint: disable=no-member
    while True:
        string = socket.recv()
        print(string)

def main():
    # sets up logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("multispider")

    # Starts metadata thread
    metadata_thread = Thread(target=metadata_receiver, daemon=True)
    metadata_thread.start()

    # Load arguments from scheduler
    with open('/monroe/config') as configfile:
        config = json.load(configfile)

    # Set up IPDB
    ip = IPDB() # pylint: disable=invalid-name

    # Creates a set of the available interface names
    if_names = set([interface.ifname for interface in ip.interfaces.values()])

    # Removes the metadata and lo interfaces from the set
    if_names.discard('lo')
    if_names.discard('metadata')

    output_files = []

    for if_name in if_names:
        logger.debug("Working on interface: " + str(if_name) + "\n")

        def ipdb_event_handler(ipdb, msg, action):
            # pylint: disable=cell-var-from-loop
            if action == 'RTM_DELLINK':
                if msg['attrs'][0][1] == if_name:
                    print("Interface went down during experiment run: " + str(if_name))
                    return 10

        # We won't be too happy if the interface goes down during measurement
        ipdb_callback_id = ip.register_callback(ipdb_event_handler)

        # Build up the arguments we need
        output_file = "/tmp/output." + str(if_name)
        output_files.append(output_file)
        pathspider_cmd = ["pathspider", "-i", if_name, "--output", output_file, "--input", "/opt/monroe/targets.ndjson"]
        pathspider_cmd += config['spider_args']

        print("running pathspider as "+" ".join(pathspider_cmd))

        # Run PATHspider!
        os.system(" ".join(pathspider_cmd))

        # The callback for this interface is no longer required
        ip.unregister_callback(ipdb_callback_id)

        # Move the results for export
        shutil.copy(output_file, "/monroe/results/{}.ndjson".format(if_name))

    ip.release()

if __name__ == "__main__":
    sys.exit(main())
